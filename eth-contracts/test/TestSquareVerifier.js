// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
//**LVC
const zokVerifier = artifacts.require("SquareVerifier");
const zokProof = require("../../zokrates/code/square/proof.json").proof;
const zokInputs = require("../../zokrates/code/square/proof.json").inputs;
const incorrectInputs = require("../../zokrates/code/square/incorrectInputProof.json").inputs;


//**LVC
contract('TestSquareVerifier', accounts => {
    describe('should be verified', function () {
        beforeEach(async function () {
            this.contract = await zokVerifier.new();
        }) 
        
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('should verify with correct proof', async function () { 
            let test = await this.contract.verifyTx.call(zokProof.a, zokProof.b, zokProof.c, zokInputs);
            assert.equal(test, true);   
        })

        // Test verification with incorrect proof
        it('should not verify with incorrect proof', async function () { 
            let test = await this.contract.verifyTx.call(zokProof.a, zokProof.b, zokProof.c, incorrectInputs);
            assert.equal(test, false);   
        })
    })
})
